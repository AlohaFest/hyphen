
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/toransahu/grpc-eg-go/machine (interfaces: MachineClient,Machine_ExecuteServer,Machine_ExecuteClient)

// Package mock_machine is a generated GoMock package.
package mock_machine

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	machine "github.com/toransahu/grpc-eg-go/machine"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockMachineClient is a mock of MachineClient interface
type MockMachineClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineClientMockRecorder
}

// MockMachineClientMockRecorder is the mock recorder for MockMachineClient
type MockMachineClientMockRecorder struct {
	mock *MockMachineClient
}

// NewMockMachineClient creates a new mock instance
func NewMockMachineClient(ctrl *gomock.Controller) *MockMachineClient {
	mock := &MockMachineClient{ctrl: ctrl}
	mock.recorder = &MockMachineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachineClient) EXPECT() *MockMachineClientMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockMachineClient) Execute(arg0 context.Context, arg1 ...grpc.CallOption) (machine.Machine_ExecuteClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}